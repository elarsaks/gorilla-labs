version: "3.8"

services:
  # Load Balancer
  gorilla-labs-nginx:
    build:
      context: ./apps/nginx
      dockerfile: Dockerfile.dev
    container_name: gorilla-labs-nginx
    ports:
      - "80:80"
      - "443:443"
      - "5000:5000"
    volumes:
      - ./keys:/etc/nginx/ssl
    restart: always
    networks:
      - gorilla-net

  # Client
  gorilla-labs-client:
    container_name: gorilla-labs-client
    build:
      context: ./apps/client
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - WATCHPACK_POLLING=true
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXT_LINKEDIN_CLIENT_ID=${NEXT_LINKEDIN_CLIENT_ID}
      - NEXT_LINKEDIN_CLIENT_SECRET=${NEXT_LINKEDIN_CLIENT_SECRET}
    restart: always
    volumes:
      - ./apps/client:/app
      - /app/node_modules
    networks:
      - gorilla-net

  # API
  gorilla-labs-api:
    container_name: gorilla-labs-api
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    ports:
      - "4000:4000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_USER=${POSTGRES_USER}
    restart: always
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    networks:
      - gorilla-net
    # depends_on:
    #   - postgres

  # # DB
  # postgres:
  #   build:
  #     context: ./apps/db
  #     dockerfile: Dockerfile
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: always
  #   networks:
  #     - gorilla-net

networks:
  gorilla-net:
    driver: bridge

volumes:
  postgres_data:
